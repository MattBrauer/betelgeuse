#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinyWidgets)
library(tidyverse)
library(stringr)
library(lubridate)
library(fs)
library(insol)
library(zoo)
library(forecast)
library(tsibble)
library(astrolibR)
library(httr)

source("../global.R")

data_dir <- "../data"

target <- "betelgeuse"
current_date <- today()
target_data_file <- fs::path(data_dir, paste0("aavso_", target), ext = "rds")

if(file_access(target_data_file, "read")) raw <- readRDS(target_data_file)
raw <- get_new_data(from_date=last_date(raw)) %>%
    bind_rows(raw) %>%
    distinct()
saveRDS(raw, file = target_data_file)
cleaned <- clean_data(raw)
latest_date <- last_date(cleaned)
dates_in_dataset <- date_range(cleaned) %>% c(.)

daily_mag <- cleaned %>%
    daily_magnitude() %>%
    distinct() %>%
    rename(mag = mean_daily_mag, n = n_daily_mag) %>%
    add_dates() %>%
    select(day, date, band, mag, n)


# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("AAVSO light curves"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            dateRangeInput(inputId = "daterange",
                           label = "Date range:",
                           start  = dates_in_dataset$end_date %m-% months(3),
                           end    = dates_in_dataset$end_date,
                           min    = dates_in_dataset$start_date,
                           max    = dates_in_dataset$end_date,
                           format = "mm/dd/yy",
                           separator = " - "
            ),
            numericRangeInput(inputId = "y_axis_range",
                              label = "y-axis range:",
                              value = c(0, 4)
            ),
            selectInput(inputId = "bandselect",
                        label = "Select Band:",
                        choices = levels(as.factor(cleaned$band)),
                        selected = "Vis.",
                        width = "220px"
            ),
            radioButtons(inputId = "transformation",
                         label = "Data transformation:",
                         c("All observations" = "all",
                           "Daily average" = "average",
                           "Daily average, >1 observation" = "avg_mult",
                           "Running average" = "run")
            )
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("magPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    output$magPlot <- renderPlot({
        
        mag_ts <- cleaned %>%
            filter(band==input$bandselect) %>%
            select(-band) %>%
            as_tsibble(key = observer, index = jd, regular = FALSE) %>%
            add_dates()
 
        
        daily_mag_ts <- daily_mag %>%
            filter(band==input$bandselect) %>%
            select(-band) %>%
            distinct() %>%
            as_tsibble(key=NULL, index=day) %>%
            fill_gaps() %>%
            mutate(in_run = if_else(is.na(date), FALSE, TRUE),
                   last_of_run = lag(in_run, default = FALSE),
                   next_of_run = lead(in_run, default = FALSE),
                   run_break = in_run & !next_of_run)

        plotdata <- switch(input$transformation,
                           all = mag_ts,
                           average = daily_mag_ts,
                           avg_mult = daily_mag_ts,
                           run = daily_mag_ts,
                           mag_ts)
        
        plottitle <- switch(input$transformation,
                            all = "all observations",
                            average = "daily average",
                            avg_mult = "daily average (>1 obs. per day)",
                            run = "running average",
                            mag_ts)
        
        plotdata %>%
            filter(date > input$daterange[1],
                   mag > input$y_axis_range[1] & mag < input$y_axis_range[2]) %>%
            ggplot(aes(x=date, y=mag)) + geom_point() + 
            scale_y_reverse() +
            ggtitle(paste0(input$bandselect, " band, ", plottitle))
        
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
