read_tsv(col_types = col_specs) %>%
rename(jd = JD,
observer = by,
error = uncert) %>%
filter(!is.na(mag)) %>%
distinct(jd, observer, band, mag, error, .keep_all=TRUE)
}
### transform h-m-s representation of RA into decimal days
ra2dec <- function(ra) {
ra$h + ra$m / 60 + ra$s / 3600
}
### add various representations of dates to tibble, including the sun's position relative to the target
add_dates <- function(magnitudes) {
magnitudes %>%
mutate(time = {if("jd" %in% names(.)) jd %% 1 else 0.5},
day = {if("jd" %in% names(.)) round(jd) else {if("day" %in% names(.)) day else NA}},
date = as_date(insol::JD(day, inverse = TRUE))) %>%
separate(date, into=c("year","month","dom"), remove=FALSE) %>%
mutate(year = as.integer(year),
month = as.integer(month),
dom = as.integer(dom),
doy = (insol::daydoy(year, month, dom) + 175) %% 365)
}
add_sunpos <- function(magnitudes, ra=ra_betelgeuse) {
magnitudes %>%
mutate(sun = sunpos(jd)$ra / 360,
sun_rel = (sun + 1 - ra2dec(ra)/24) %% 1,
sun_pos = sun_rel + time)
}
### create tibble from data files, combine and write combined to file
combine_files <- function(files, output_filename, dedup = TRUE) {
col_specs <- cols(.default = col_character())
file_contents <- do.call(rbind, lapply(as.list(files),
function(file) {
read_csv(file,
col_types = col_specs)
}))
if(dedup == TRUE) file_contents <- file_contents %>% distinct()
write_csv(file_contents, output_filename)
file_contents
}
### create tibble from data file, remove missing observations and rename some of the variables
load_file <- function(file) {
col_specs <- cols(
.default = col_character(),
JD = col_double(),
Magnitude = col_double(),
Uncertainty = col_double(),
Band = col_character(),
`Observer Code` = col_character(),
`Comment Code(s)` = col_character(),
`Validation Flag` = col_character(),
`Star Name` = col_character(),
`Measurement Method` = col_character(),
`Grouping Method` = col_skip(),
HJD = col_skip(),
HQuncertainty = col_skip()
)
read_csv(file, col_types = col_specs) %>%
rename(jd = JD,
observer = `Observer Code`,
band = Band,
mag = Magnitude,
error = Uncertainty,
comCode = `Comment Code(s)`,
comment = Comments,
transformed = Transfomed,
airmass = Airmass,
obsAffil = `Observer Affiliation`,
mtype = `Measurement Method`,
starName = `Star Name`,
adsRef = `ADS Reference`,
digitizer = Digitizer,
credit = Credit,
cmag = Cmag,
kmag = Kmag,
val = `Validation Flag`,
compStar1 = `Comp Star 1`,
compStar2 = `Comp Star 2`,
charts = Charts) %>%
filter(!is.na(mag)) %>%
distinct(jd, by, band, mag, error, .keep_all=TRUE)
}
### average multiple simultaneous observations by observer
clean_data <- function(raw_data) {
raw_data %>%
select(jd, mag, observer, band) %>%
group_by(jd, observer, band) %>%
summarize(delta = max(mag) - min(mag), mag = mean(mag), n = n()) %>%
distinct() %>%
ungroup() %>%
select(jd, observer, band, mag, n, delta) %>%
arrange(jd)
}
### calculate average daily magnitude where day spans [0.5, 0.5)
daily_magnitude <- function(magnitudes) {
magnitudes %>%
mutate(day = round(jd)) %>%
select(day, mag, band, observer) %>%
group_by(band, observer, day) %>%
summarize(daily_observer_mag = mean(mag)) %>%
group_by(band, day) %>%
mutate(mean_daily_mag = mean(daily_observer_mag, na.rm=TRUE),
sd_daily_mag = sd(daily_observer_mag, na.rm=TRUE),
n_daily_mag = n(),
delta_daily_mag = (daily_observer_mag - mean_daily_mag)) %>%
ungroup() %>%
arrange(day)
}
last_date <- function(raw) {
raw %>%
arrange(desc(jd)) %>%
filter(row_number()==1) %>%
add_dates() %>%
pull(date)
}
#combine_files(files_betelgeuse, output_filename = output_file_betelgeuse)
if(file_access(data_betelgeuse, "read")) raw <- readRDS(data_betelgeuse) else raw <- load_file(output_file_betelgeuse)
raw <- get_new_data(from_date=last_date(raw)) %>%
bind_rows(raw) %>%
distinct()
saveRDS(raw, file = data_betelgeuse)
cleaned <- clean_data(raw)
daily_vis <- cleaned %>%
filter(band=="Vis.") %>%
daily_magnitude() %>%
select(-band) %>%
add_dates()
daily_v <- cleaned %>%
filter(band=="V") %>%
daily_magnitude() %>%
select(-band) %>%
add_dates()
multiday <- daily_vis %>%
select(day, n_daily_mag) %>%
distinct() %>%
filter(n_daily_mag > 1) %>%
pull(day)
vis_ts <- cleaned %>%
filter(band=="Vis.") %>%
select(-band) %>%
as_tsibble(key = observer, index = jd, regular = FALSE)
v_ts <- cleaned %>%
filter(band=="V") %>%
select(-band) %>%
as_tsibble(key = observer, index = jd, regular = FALSE)
vvis_ts <- cleaned %>%
filter(band=="V" | band=="Vis.") %>%
as_tsibble(key = c(observer, band), index = jd, regular = FALSE)
daily_vis_ts <- daily_vis %>%
select(day, date, mean_daily_mag, sd_daily_mag, n_daily_mag) %>%
distinct() %>%
as_tsibble(key=NULL, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_v_ts <- daily_v %>%
select(day, date, mean_daily_mag, sd_daily_mag, n_daily_mag) %>%
distinct() %>%
as_tsibble(key=NULL, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
#reliable <- daily_vis %>% mutate(se = (delta_daily_mag/sd_daily_mag)**2) %>% group_by(observer) %>% summarize(me = mean(se, na.rm=TRUE), n=n()) %>% filter(me <= 1.2) %>% pull(observer)
daily_v_ts %>%
filter(date > '2019-01-01') %>%
ggplot(aes(x=date, y=mean_daily_mag)) + geom_point() + scale_y_reverse()
daily_v_ts %>%
filter(date > '2019-10-01') %>%
ggplot(aes(x=date, y=mean_daily_mag)) + geom_point() + scale_y_reverse()
v_ts %>%
add_dates() %>%
filter(date > '2019-01-01', mag < 4) %>%
ggplot(aes(x=date, y=mag)) + geom_point() + scale_y_reverse()
v_ts %>%
add_dates() %>%
filter(date > '2019-10-01', mag < 4) %>%
ggplot(aes(x=date, y=mag)) + geom_point() + scale_y_reverse()
daily_vis_ts %>%
filter(date > '2019-01-01') %>%
ggplot(aes(x=date, y=mean_daily_mag)) + geom_point() + scale_y_reverse()
daily_vis_ts %>%
filter(date > '2019-10-01') %>%
ggplot(aes(x=date, y=mean_daily_mag)) + geom_point() + scale_y_reverse()
vis_ts %>%
add_dates() %>%
filter(date > '2019-01-01', mag < 4) %>%
ggplot(aes(x=date, y=mag)) + geom_point() + scale_y_reverse()
vis_ts %>%
add_dates() %>%
filter(date > '2019-10-01', mag < 4) %>%
ggplot(aes(x=date, y=mag)) + geom_point() + scale_y_reverse()
vis_ts
vis_ts %>% arrange(desc(jd)) %>% add_dates()
library(shiny)
library(tidyverse)
library(stringr)
library(lubridate)
library(fs)
library(insol)
library(zoo)
library(forecast)
library(tsibble)
library(astrolibR)
library(httr)
target <- "betelgeuse"
data_dir <- "data"
current_date <- today()
?fs
?path
target_data_file <- fs::path(data_dir, paste0("aavso_", target), ext = "rds")
target_data_file
if(file_access(target_data_file, "read")) raw <- readRDS(target_data_file)
raw
raw <- get_new_data(from_date=last_date(raw)) %>%
bind_rows(raw) %>%
distinct()
raw
saveRDS(raw, file = target_data_file)
cleaned <- clean_data(raw)
source("global.R")
data_dir <- "data"
target <- "betelgeuse"
current_date <- today()
target_data_file <- fs::path(data_dir, paste0("aavso_", target), ext = "rds")
if(file_access(target_data_file, "read")) raw <- readRDS(target_data_file)
raw <- get_new_data(from_date=last_date(raw)) %>%
bind_rows(raw) %>%
distinct()
saveRDS(raw, file = target_data_file)
cleaned <- clean_data(raw)
latest_date <- last_date(cleaned)
latest_date
?row_number
cleaned %>% summarize(start_date=min(jd), end_date=max(jd))
cleaned %>% summarize(start_date=as_date(insol::JD(min(jd), inverse=TRUE), end_date=max(jd))
)
cleaned %>% summarize(start_date=as_date(insol::JD(min(jd), inverse=TRUE)), end_date=max(jd))
date_range <- function(ds) {
ds %>%
summarize(start_date=as_date(insol::JD(min(jd), inverse=TRUE)),
end_date=as_date(insol::JD(max(jd), inverse=TRUE)))
}
date_range(cleaned)
runApp('lightcurve')
runApp('lightcurve')
latest_date
date_range(cleaned)
as.data.frame(date_range(cleaned))
as.Date(date_range(cleaned))
date_range(cleaned) %>% unlist(., use.names=FALSE)
date_range(cleaned) %>% unlist(.)
date_range(cleaned) %>% c(.)
dates_in_dataset <- date_range(cleaned) %>% c(.)
dates_in_dataset$start_date
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
cleaned
levels(cleaned$band)
cleaned$band
raw
raw$band
levels(as.factor(raw$band))
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
install.packages("shinyWidgets")
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
cleaned
cleaned %>% daily_magnitude()
multiday <- cleaned %>%
daily_magnitude() %>%
select(day, mean_daily_mag, n_daily_mag) %>%
distinct() %>%
filter(n_daily_mag > 1)
multiday
multiday <- cleaned %>%
daily_magnitude() %>%
select(day, mean_daily_mag, n_daily_mag) %>%
distinct() %>%
rename(mag = mean_daily_mag) %>%
select(day, mag) %>%
add_dates()
multiday
multiday <- cleaned %>%
daily_magnitude() %>%
select(day, mean_daily_mag, n_daily_mag) %>%
distinct() %>%
rename(mag = mean_daily_mag) %>%
add_dates() %>%
select(date, mag)
multiday
daily_mag <- cleaned %>%
daily_magnitude() %>%
select(day, mean_daily_mag, n_daily_mag) %>%
distinct() %>%
rename(mag = mean_daily_mag, n = n_daily_mag) %>%
add_dates() %>%
select(date, band, mag, n)
daily_mag <- cleaned %>%
daily_magnitude() %>%
distinct() %>%
rename(mag = mean_daily_mag, n = n_daily_mag) %>%
add_dates() %>%
select(date, band, mag, n)
daily_mag
mag_ts <- cleaned %>%
filter(band==input$bandselect) %>%
select(-band) %>%
as_tsibble(key = observer, index = jd, regular = FALSE)
daily_mag_ts <- daily_mag %>%
as_tsibble(key=NULL, index=date) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
distinct() %>%
as_tsibble(key=NULL, index=date) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag
daily_mag_ts <- daily_mag %>%
distinct() %>%
as_tsibble(key=NULL, index=c(date, band)) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
group_by(band) %>%
as_tsibble(key=NULL, index=date) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
as_tsibble(key=band, index=date) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
as_tsibble(key=date, index=band) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
as_tsibble(key=band, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
cleaned %>%
daily_magnitude() %>%
distinct() %>%
rename(mag = mean_daily_mag, n = n_daily_mag) %>%
add_dates()
daily_mag <- cleaned %>%
daily_magnitude() %>%
distinct() %>%
rename(mag = mean_daily_mag, n = n_daily_mag) %>%
add_dates() %>%
select(day, date, band, mag, n)
daily_mag
daily_mag_ts <- daily_mag %>%
as_tsibble(key=band, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
group_by(day, band) %>%
as_tsibble(key=band, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
group_by(day, band) %>%
distinct() %>%
as_tsibble(key=band, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag_ts <- daily_mag %>%
distinct() %>%
as_tsibble(key=NULL, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
daily_mag
daily_mag_ts <- daily_mag %>%
distinct() %>%
as_tsibble(key=NULL, index=day) %>%
fill_gaps() %>%
mutate(in_run = if_else(is.na(date), FALSE, TRUE),
last_of_run = lag(in_run, default = FALSE),
next_of_run = lead(in_run, default = FALSE),
run_break = in_run & !next_of_run) %>%
add_dates()
mag_ts
cleaned %>% filter(band=="Vis.")
cleaned %>% filter(band=="Vis.") %>% select(-band)
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
runApp('lightcurve')
cleaned
runApp('lightcurve')
runApp('lightcurve')
shiny::runApp('lightcurve')
shiny::runApp('lightcurve')
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(stringr)
library(lubridate)
library(fs)
library(insol)
library(zoo)
library(forecast)
library(tsibble)
library(astrolibR)
library(httr)
source("../global.R")
source("global.R")
data_dir <- "data"
target <- "betelgeuse"
current_date <- today()
current_date
target_data_file <- fs::path(data_dir, paste0("aavso_", target), ext = "rds")
if(file_access(target_data_file, "read")) raw <- readRDS(target_data_file)
raw <- get_new_data(from_date=last_date(raw)) %>%
bind_rows(raw) %>%
distinct()
raw
saveRDS(raw, file = target_data_file)
cleaned <- clean_data(raw)
last_date(cleaned)
runApp('lightcurve')
dates_in_dataset <- date_range(cleaned) %>% c(.)
dates_in_dataset
last_date(cleaned)
date_range <- function(ds) {
ds %>%
summarize(start_date=as_date(insol::JD(min(jd + 0.5), inverse=TRUE)),
end_date=as_date(insol::JD(max(jd + 0.5), inverse=TRUE)))
}
dates_in_dataset <- date_range(cleaned) %>% c(.)
dates_in_dataset
runApp('lightcurve')
runApp('lightcurve')
daily_mag_ts
cleaned
daily_mag <- cleaned %>%
daily_magnitude() %>%
distinct() %>%
rename(mag = mean_daily_mag, n = n_daily_mag) %>%
add_dates() %>%
select(day, date, band, mag, n)
daily_mag
daily_mag %>% top_n(-1, day)
daily_mag %>% top_n(1, day)
runApp('lightcurve')
runApp()
